/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"encoding/json"
	"fmt"
)

// GetAllInstrumentsTypeFilterParameterInner the model 'GetAllInstrumentsTypeFilterParameterInner'
type GetAllInstrumentsTypeFilterParameterInner string

// List of getAllInstruments_typeFilter_parameter_inner
const (
	EQUITY GetAllInstrumentsTypeFilterParameterInner = "EQUITY"
	OPTION GetAllInstrumentsTypeFilterParameterInner = "OPTION"
	MULTI_LEG_INSTRUMENT GetAllInstrumentsTypeFilterParameterInner = "MULTI_LEG_INSTRUMENT"
	CRYPTO GetAllInstrumentsTypeFilterParameterInner = "CRYPTO"
	ALT GetAllInstrumentsTypeFilterParameterInner = "ALT"
	TREASURY GetAllInstrumentsTypeFilterParameterInner = "TREASURY"
	BOND GetAllInstrumentsTypeFilterParameterInner = "BOND"
	INDEX GetAllInstrumentsTypeFilterParameterInner = "INDEX"
)

// All allowed values of GetAllInstrumentsTypeFilterParameterInner enum
var AllowedGetAllInstrumentsTypeFilterParameterInnerEnumValues = []GetAllInstrumentsTypeFilterParameterInner{
	"EQUITY",
	"OPTION",
	"MULTI_LEG_INSTRUMENT",
	"CRYPTO",
	"ALT",
	"TREASURY",
	"BOND",
	"INDEX",
}

func (v *GetAllInstrumentsTypeFilterParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetAllInstrumentsTypeFilterParameterInner(value)
	for _, existing := range AllowedGetAllInstrumentsTypeFilterParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetAllInstrumentsTypeFilterParameterInner", value)
}

// NewGetAllInstrumentsTypeFilterParameterInnerFromValue returns a pointer to a valid GetAllInstrumentsTypeFilterParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetAllInstrumentsTypeFilterParameterInnerFromValue(v string) (*GetAllInstrumentsTypeFilterParameterInner, error) {
	ev := GetAllInstrumentsTypeFilterParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetAllInstrumentsTypeFilterParameterInner: valid values are %v", v, AllowedGetAllInstrumentsTypeFilterParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetAllInstrumentsTypeFilterParameterInner) IsValid() bool {
	for _, existing := range AllowedGetAllInstrumentsTypeFilterParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to getAllInstruments_typeFilter_parameter_inner value
func (v GetAllInstrumentsTypeFilterParameterInner) Ptr() *GetAllInstrumentsTypeFilterParameterInner {
	return &v
}

type NullableGetAllInstrumentsTypeFilterParameterInner struct {
	value *GetAllInstrumentsTypeFilterParameterInner
	isSet bool
}

func (v NullableGetAllInstrumentsTypeFilterParameterInner) Get() *GetAllInstrumentsTypeFilterParameterInner {
	return v.value
}

func (v *NullableGetAllInstrumentsTypeFilterParameterInner) Set(val *GetAllInstrumentsTypeFilterParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllInstrumentsTypeFilterParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllInstrumentsTypeFilterParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllInstrumentsTypeFilterParameterInner(val *GetAllInstrumentsTypeFilterParameterInner) *NullableGetAllInstrumentsTypeFilterParameterInner {
	return &NullableGetAllInstrumentsTypeFilterParameterInner{value: val, isSet: true}
}

func (v NullableGetAllInstrumentsTypeFilterParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllInstrumentsTypeFilterParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

