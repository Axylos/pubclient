/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PreflightControllerAPIService PreflightControllerAPI service
type PreflightControllerAPIService service

type ApiPreflightMultiLegRequest struct {
	ctx context.Context
	ApiService *PreflightControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest *ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest
}

func (r ApiPreflightMultiLegRequest) ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest(comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest) ApiPreflightMultiLegRequest {
	r.comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest = &comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest
	return r
}

func (r ApiPreflightMultiLegRequest) Execute() (*ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegResponse, *http.Response, error) {
	return r.ApiService.PreflightMultiLegExecute(r)
}

/*
PreflightMultiLeg Calculates the estimated financial impact of a complex multi-leg trade before execution

Performs preflight calculations for a multi-leg order (a transaction involving multiple securities or options strategies such as spreads, straddles, or combinations) to provide comprehensive cost estimates and account impact details. Returns estimated commission, regulatory fees, total order value, buying power requirements, margin impact, net credit/debit amounts, and strategy-specific information to help users make informed trading decisions before order placement. This endpoint handles complex options strategies and calculates the combined effect of all legs in the trade. Note that these are estimates only, and actual execution values may vary depending on market conditions and fill prices. This endpoint may be called before submitting an actual multi-leg order to understand the potential financial implications of the strategy.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiPreflightMultiLegRequest
*/
func (a *PreflightControllerAPIService) PreflightMultiLeg(ctx context.Context, accountId string) ApiPreflightMultiLegRequest {
	return ApiPreflightMultiLegRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegResponse
func (a *PreflightControllerAPIService) PreflightMultiLegExecute(r ApiPreflightMultiLegRequest) (*ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreflightControllerAPIService.PreflightMultiLeg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/preflight/multi-leg"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestPreflightPreflightMultiLegRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestPreflightPreflightMultiLegResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreflightSingleLegRequest struct {
	ctx context.Context
	ApiService *PreflightControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest *ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest
}

func (r ApiPreflightSingleLegRequest) ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest(comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest) ApiPreflightSingleLegRequest {
	r.comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest = &comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest
	return r
}

func (r ApiPreflightSingleLegRequest) Execute() (*ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegResponse, *http.Response, error) {
	return r.ApiService.PreflightSingleLegExecute(r)
}

/*
PreflightSingleLeg Calculates the estimated financial impact of a potential trade before execution

Performs preflight calculations for a single-leg order (a transaction involving a single security) to provide comprehensive cost estimates and account impact details. Returns estimated commission, regulatory fees, order value, buying power requirements, margin impact, and other trade-specific information to help users make informed trading decisions before order placement. Note that these are estimates only, and actual execution values may vary depending on market conditions. This endpoint may be called before submitting an actual order to understand the potential financial implications.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiPreflightSingleLegRequest
*/
func (a *PreflightControllerAPIService) PreflightSingleLeg(ctx context.Context, accountId string) ApiPreflightSingleLegRequest {
	return ApiPreflightSingleLegRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegResponse
func (a *PreflightControllerAPIService) PreflightSingleLegExecute(r ApiPreflightSingleLegRequest) (*ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreflightControllerAPIService.PreflightSingleLeg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/preflight/single-leg"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestPreflightPreflightSingleLegRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestPreflightPreflightSingleLegResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
