/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// QuoteControllerAPIService QuoteControllerAPI service
type QuoteControllerAPIService service

type ApiGetOptionChainRequest struct {
	ctx context.Context
	ApiService *QuoteControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest *ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest
}

func (r ApiGetOptionChainRequest) ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest(comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest) ApiGetOptionChainRequest {
	r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest = &comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest
	return r
}

func (r ApiGetOptionChainRequest) Execute() (*ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainResponse, *http.Response, error) {
	return r.ApiService.GetOptionChainExecute(r)
}

/*
GetOptionChain Get option chain

Requires the `marketdata` scope.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiGetOptionChainRequest
*/
func (a *QuoteControllerAPIService) GetOptionChain(ctx context.Context, accountId string) ApiGetOptionChainRequest {
	return ApiGetOptionChainRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainResponse
func (a *QuoteControllerAPIService) GetOptionChainExecute(r ApiGetOptionChainRequest) (*ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteControllerAPIService.GetOptionChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/marketdata/{accountId}/option-chain"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.accountId) < 1 {
		return localVarReturnValue, nil, reportError("accountId must have at least 1 elements")
	}
	if r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionChainResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOptionExpirationsRequest struct {
	ctx context.Context
	ApiService *QuoteControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest *ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest
}

func (r ApiGetOptionExpirationsRequest) ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest(comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest) ApiGetOptionExpirationsRequest {
	r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest = &comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest
	return r
}

func (r ApiGetOptionExpirationsRequest) Execute() (*ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsResponse, *http.Response, error) {
	return r.ApiService.GetOptionExpirationsExecute(r)
}

/*
GetOptionExpirations Get option expirations

Requires the `marketdata` scope.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiGetOptionExpirationsRequest
*/
func (a *QuoteControllerAPIService) GetOptionExpirations(ctx context.Context, accountId string) ApiGetOptionExpirationsRequest {
	return ApiGetOptionExpirationsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsResponse
func (a *QuoteControllerAPIService) GetOptionExpirationsExecute(r ApiGetOptionExpirationsRequest) (*ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteControllerAPIService.GetOptionExpirations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/marketdata/{accountId}/option-expirations"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.accountId) < 1 {
		return localVarReturnValue, nil, reportError("accountId must have at least 1 elements")
	}
	if r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayOptionExpirationsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetQuotesRequest struct {
	ctx context.Context
	ApiService *QuoteControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest *ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest
}

func (r ApiGetQuotesRequest) ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest(comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest) ApiGetQuotesRequest {
	r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest = &comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest
	return r
}

func (r ApiGetQuotesRequest) Execute() (*ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteResponse, *http.Response, error) {
	return r.ApiService.GetQuotesExecute(r)
}

/*
GetQuotes Get quotes

Requires the `marketdata` scope.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiGetQuotesRequest
*/
func (a *QuoteControllerAPIService) GetQuotes(ctx context.Context, accountId string) ApiGetQuotesRequest {
	return ApiGetQuotesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteResponse
func (a *QuoteControllerAPIService) GetQuotesExecute(r ApiGetQuotesRequest) (*ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteControllerAPIService.GetQuotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/marketdata/{accountId}/quotes"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.accountId) < 1 {
		return localVarReturnValue, nil, reportError("accountId must have at least 1 elements")
	}
	if r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestMarketdataQuoteGatewayQuoteResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
