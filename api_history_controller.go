/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type HistoryControllerAPI interface {

	/*
	GetHistory Method for GetHistory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountId The account ID.
	@return HistoryControllerAPIGetHistoryRequest
	*/
	GetHistory(ctx context.Context, accountId string) HistoryControllerAPIGetHistoryRequest

	// GetHistoryExecute executes the request
	//  @return ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage
	GetHistoryExecute(r HistoryControllerAPIGetHistoryRequest) (*ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage, *http.Response, error)
}

// HistoryControllerAPIService HistoryControllerAPI service
type HistoryControllerAPIService service

type HistoryControllerAPIGetHistoryRequest struct {
	ctx context.Context
	ApiService HistoryControllerAPI
	accountId string
	start *time.Time
	end *time.Time
	pageSize *int32
	nextToken *string
}

// Start timestamp of the history query.
func (r HistoryControllerAPIGetHistoryRequest) Start(start time.Time) HistoryControllerAPIGetHistoryRequest {
	r.start = &start
	return r
}

// End timestamp of the history query.
func (r HistoryControllerAPIGetHistoryRequest) End(end time.Time) HistoryControllerAPIGetHistoryRequest {
	r.end = &end
	return r
}

// Maximum of items to return. The response can contain fewer items if the events page contains items not relevant for history.
func (r HistoryControllerAPIGetHistoryRequest) PageSize(pageSize int32) HistoryControllerAPIGetHistoryRequest {
	r.pageSize = &pageSize
	return r
}

// Token to retrieve the next page of results.
func (r HistoryControllerAPIGetHistoryRequest) NextToken(nextToken string) HistoryControllerAPIGetHistoryRequest {
	r.nextToken = &nextToken
	return r
}

func (r HistoryControllerAPIGetHistoryRequest) Execute() (*ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage, *http.Response, error) {
	return r.ApiService.GetHistoryExecute(r)
}

/*
GetHistory Method for GetHistory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The account ID.
 @return HistoryControllerAPIGetHistoryRequest
*/
func (a *HistoryControllerAPIService) GetHistory(ctx context.Context, accountId string) HistoryControllerAPIGetHistoryRequest {
	return HistoryControllerAPIGetHistoryRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage
func (a *HistoryControllerAPIService) GetHistoryExecute(r HistoryControllerAPIGetHistoryRequest) (*ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryControllerAPIService.GetHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.accountId) < 1 {
		return localVarReturnValue, nil, reportError("accountId must have at least 1 elements")
	}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.nextToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextToken", r.nextToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestHistoryGatewayHistoryResponsePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
