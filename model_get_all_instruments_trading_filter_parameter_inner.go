/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"encoding/json"
	"fmt"
)

// GetAllInstrumentsTradingFilterParameterInner the model 'GetAllInstrumentsTradingFilterParameterInner'
type GetAllInstrumentsTradingFilterParameterInner string

// List of getAllInstruments_tradingFilter_parameter_inner
const (
	BUY_AND_SELL GetAllInstrumentsTradingFilterParameterInner = "BUY_AND_SELL"
	LIQUIDATION_ONLY GetAllInstrumentsTradingFilterParameterInner = "LIQUIDATION_ONLY"
	DISABLED GetAllInstrumentsTradingFilterParameterInner = "DISABLED"
)

// All allowed values of GetAllInstrumentsTradingFilterParameterInner enum
var AllowedGetAllInstrumentsTradingFilterParameterInnerEnumValues = []GetAllInstrumentsTradingFilterParameterInner{
	"BUY_AND_SELL",
	"LIQUIDATION_ONLY",
	"DISABLED",
}

func (v *GetAllInstrumentsTradingFilterParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetAllInstrumentsTradingFilterParameterInner(value)
	for _, existing := range AllowedGetAllInstrumentsTradingFilterParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetAllInstrumentsTradingFilterParameterInner", value)
}

// NewGetAllInstrumentsTradingFilterParameterInnerFromValue returns a pointer to a valid GetAllInstrumentsTradingFilterParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetAllInstrumentsTradingFilterParameterInnerFromValue(v string) (*GetAllInstrumentsTradingFilterParameterInner, error) {
	ev := GetAllInstrumentsTradingFilterParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetAllInstrumentsTradingFilterParameterInner: valid values are %v", v, AllowedGetAllInstrumentsTradingFilterParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetAllInstrumentsTradingFilterParameterInner) IsValid() bool {
	for _, existing := range AllowedGetAllInstrumentsTradingFilterParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to getAllInstruments_tradingFilter_parameter_inner value
func (v GetAllInstrumentsTradingFilterParameterInner) Ptr() *GetAllInstrumentsTradingFilterParameterInner {
	return &v
}

type NullableGetAllInstrumentsTradingFilterParameterInner struct {
	value *GetAllInstrumentsTradingFilterParameterInner
	isSet bool
}

func (v NullableGetAllInstrumentsTradingFilterParameterInner) Get() *GetAllInstrumentsTradingFilterParameterInner {
	return v.value
}

func (v *NullableGetAllInstrumentsTradingFilterParameterInner) Set(val *GetAllInstrumentsTradingFilterParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllInstrumentsTradingFilterParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllInstrumentsTradingFilterParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllInstrumentsTradingFilterParameterInner(val *GetAllInstrumentsTradingFilterParameterInner) *NullableGetAllInstrumentsTradingFilterParameterInner {
	return &NullableGetAllInstrumentsTradingFilterParameterInner{value: val, isSet: true}
}

func (v NullableGetAllInstrumentsTradingFilterParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllInstrumentsTradingFilterParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

