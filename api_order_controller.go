/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OrderControllerAPIService OrderControllerAPI service
type OrderControllerAPIService service

type ApiCancelOrderRequest struct {
	ctx context.Context
	ApiService *OrderControllerAPIService
	accountId string
	orderId string
}

func (r ApiCancelOrderRequest) Execute() (*http.Response, error) {
	return r.ApiService.CancelOrderExecute(r)
}

/*
CancelOrder Cancel the an order. System is async, use the GET endpoint to see when the order is cancelled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @param orderId
 @return ApiCancelOrderRequest
*/
func (a *OrderControllerAPIService) CancelOrder(ctx context.Context, accountId string, orderId string) ApiCancelOrderRequest {
	return ApiCancelOrderRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		orderId: orderId,
	}
}

// Execute executes the request
func (a *OrderControllerAPIService) CancelOrderExecute(r ApiCancelOrderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderControllerAPIService.CancelOrder")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/order/{orderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOrderRequest struct {
	ctx context.Context
	ApiService *OrderControllerAPIService
	accountId string
	orderId string
}

func (r ApiGetOrderRequest) Execute() (*ComHellopublicUserapigatewayApiRestOrderGatewayOrder, *http.Response, error) {
	return r.ApiService.GetOrderExecute(r)
}

/*
GetOrder Get the details for an order. Placing orders is async, so this endpoint may return 404 if the order has not bee processed yet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @param orderId
 @return ApiGetOrderRequest
*/
func (a *OrderControllerAPIService) GetOrder(ctx context.Context, accountId string, orderId string) ApiGetOrderRequest {
	return ApiGetOrderRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestOrderGatewayOrder
func (a *OrderControllerAPIService) GetOrderExecute(r ApiGetOrderRequest) (*ComHellopublicUserapigatewayApiRestOrderGatewayOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestOrderGatewayOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderControllerAPIService.GetOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/order/{orderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ComHellopublicUserapigatewayApiRestOrderGatewayOrder
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceMultilegOrderRequest struct {
	ctx context.Context
	ApiService *OrderControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest *ComHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest
}

func (r ApiPlaceMultilegOrderRequest) ComHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest(comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest ComHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest) ApiPlaceMultilegOrderRequest {
	r.comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest = &comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest
	return r
}

func (r ApiPlaceMultilegOrderRequest) Execute() (*ComHellopublicUserapigatewayApiRestOrderApiOrderResult, *http.Response, error) {
	return r.ApiService.PlaceMultilegOrderExecute(r)
}

/*
PlaceMultilegOrder Create a new multi-leg order. Placing orders is async, use the GET endpoint to get details about the order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiPlaceMultilegOrderRequest
*/
func (a *OrderControllerAPIService) PlaceMultilegOrder(ctx context.Context, accountId string) ApiPlaceMultilegOrderRequest {
	return ApiPlaceMultilegOrderRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestOrderApiOrderResult
func (a *OrderControllerAPIService) PlaceMultilegOrderExecute(r ApiPlaceMultilegOrderRequest) (*ComHellopublicUserapigatewayApiRestOrderApiOrderResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestOrderApiOrderResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderControllerAPIService.PlaceMultilegOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/order/multileg"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestOrderApiMultilegOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestOrderApiOrderResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceOrderRequest struct {
	ctx context.Context
	ApiService *OrderControllerAPIService
	accountId string
	comHellopublicUserapigatewayApiRestOrderApiOrderRequest *ComHellopublicUserapigatewayApiRestOrderApiOrderRequest
}

func (r ApiPlaceOrderRequest) ComHellopublicUserapigatewayApiRestOrderApiOrderRequest(comHellopublicUserapigatewayApiRestOrderApiOrderRequest ComHellopublicUserapigatewayApiRestOrderApiOrderRequest) ApiPlaceOrderRequest {
	r.comHellopublicUserapigatewayApiRestOrderApiOrderRequest = &comHellopublicUserapigatewayApiRestOrderApiOrderRequest
	return r
}

func (r ApiPlaceOrderRequest) Execute() (*ComHellopublicUserapigatewayApiRestOrderApiOrderResult, *http.Response, error) {
	return r.ApiService.PlaceOrderExecute(r)
}

/*
PlaceOrder Create a new order. Placing orders is async, use the GET endpoint to get details about the order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiPlaceOrderRequest
*/
func (a *OrderControllerAPIService) PlaceOrder(ctx context.Context, accountId string) ApiPlaceOrderRequest {
	return ApiPlaceOrderRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestOrderApiOrderResult
func (a *OrderControllerAPIService) PlaceOrderExecute(r ApiPlaceOrderRequest) (*ComHellopublicUserapigatewayApiRestOrderApiOrderResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestOrderApiOrderResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderControllerAPIService.PlaceOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/{accountId}/order"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comHellopublicUserapigatewayApiRestOrderApiOrderRequest == nil {
		return localVarReturnValue, nil, reportError("comHellopublicUserapigatewayApiRestOrderApiOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comHellopublicUserapigatewayApiRestOrderApiOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ComHellopublicUserapigatewayApiRestOrderApiOrderResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
