/*
User Api Gateway REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pubclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type AccountControllerAPI interface {

	/*
	FirstMemberInteractions Method for FirstMemberInteractions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AccountControllerAPIFirstMemberInteractionsRequest
	*/
	FirstMemberInteractions(ctx context.Context) AccountControllerAPIFirstMemberInteractionsRequest

	// FirstMemberInteractionsExecute executes the request
	//  @return ComHellopublicUserapigatewayApiRestAccountFirstMemberInteractions
	FirstMemberInteractionsExecute(r AccountControllerAPIFirstMemberInteractionsRequest) (*ComHellopublicUserapigatewayApiRestAccountFirstMemberInteractions, *http.Response, error)

	/*
	GetAccounts Get accounts

	Retrieves the list of financial accounts associated with the authenticated user.
This includes brokerage, retirement, and high-yield cash accounts.

The response contains account objects that represent each available account.

Note: The `accountId` returned by this endpoint is required for most subsequent API operations.
It serves as a stable, persistent identifier for the lifetime of the account.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AccountControllerAPIGetAccountsRequest
	*/
	GetAccounts(ctx context.Context) AccountControllerAPIGetAccountsRequest

	// GetAccountsExecute executes the request
	//  @return ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse
	GetAccountsExecute(r AccountControllerAPIGetAccountsRequest) (*ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse, *http.Response, error)
}

// AccountControllerAPIService AccountControllerAPI service
type AccountControllerAPIService service

type AccountControllerAPIFirstMemberInteractionsRequest struct {
	ctx context.Context
	ApiService AccountControllerAPI
}

func (r AccountControllerAPIFirstMemberInteractionsRequest) Execute() (*ComHellopublicUserapigatewayApiRestAccountFirstMemberInteractions, *http.Response, error) {
	return r.ApiService.FirstMemberInteractionsExecute(r)
}

/*
FirstMemberInteractions Method for FirstMemberInteractions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountControllerAPIFirstMemberInteractionsRequest
*/
func (a *AccountControllerAPIService) FirstMemberInteractions(ctx context.Context) AccountControllerAPIFirstMemberInteractionsRequest {
	return AccountControllerAPIFirstMemberInteractionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestAccountFirstMemberInteractions
func (a *AccountControllerAPIService) FirstMemberInteractionsExecute(r AccountControllerAPIFirstMemberInteractionsRequest) (*ComHellopublicUserapigatewayApiRestAccountFirstMemberInteractions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestAccountFirstMemberInteractions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountControllerAPIService.FirstMemberInteractions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/account/first-interactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountControllerAPIGetAccountsRequest struct {
	ctx context.Context
	ApiService AccountControllerAPI
}

func (r AccountControllerAPIGetAccountsRequest) Execute() (*ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse, *http.Response, error) {
	return r.ApiService.GetAccountsExecute(r)
}

/*
GetAccounts Get accounts

Retrieves the list of financial accounts associated with the authenticated user.
This includes brokerage, retirement, and high-yield cash accounts.

The response contains account objects that represent each available account.

Note: The `accountId` returned by this endpoint is required for most subsequent API operations.
It serves as a stable, persistent identifier for the lifetime of the account.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountControllerAPIGetAccountsRequest
*/
func (a *AccountControllerAPIService) GetAccounts(ctx context.Context) AccountControllerAPIGetAccountsRequest {
	return AccountControllerAPIGetAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse
func (a *AccountControllerAPIService) GetAccountsExecute(r AccountControllerAPIGetAccountsRequest) (*ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountControllerAPIService.GetAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userapigateway/trading/account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ComHellopublicUserapigatewayApiRestAccountAccountSettingsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
